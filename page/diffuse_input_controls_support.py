#! /usr/bin/env python
#
# Support module generated by PAGE version 4.7
# In conjunction with Tcl version 8.6
#    Sep 13, 2016 04:43:55 PM


import sys
import os
import re
import diffuse_input_functions as DIF
import ZMCGUI_support
import subprocess 
import numpy as np
from shutil import copyfile
from shutil import move

# oct 27 2017 - Eric 
# the following lines were nessesary to prevent some strange conflict with 
# between tkinter and matplotlib 
 
import matplotlib
matplotlib.use('TkAgg')
from matplotlib import pyplot


try:
    from Tkinter import *
except ImportError:
    from Tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1



def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global h1,h2,h3,k1,k2,k3,l1,l2,l3
    h1 = StringVar()
    h2 = StringVar()
    h3 = StringVar()
    k1 = StringVar()
    k2 = StringVar()
    k3 = StringVar()
    l1 = StringVar()
    l2 = StringVar()
    l3 = StringVar()

    h1.set(u"0.0")
    h2.set(u"0.0")
    h3.set(u"0.0")
    k1.set(u"1.0")
    k2.set(u"0.0")
    k3.set(u"0.0")
    l1.set(u"0.0")
    l2.set(u"0.0")
    l3.set(u"1.0")

    global dsname
    dsname = StringVar()
    global Lam
    Lam = StringVar()
    global Theta_max
    Theta_max = StringVar()
    
    dsname.set(u"h0l")
    Lam.set(u"0.7")
    Theta_max.set(u"25.5")

    global lot_a
    lot_a = StringVar()
    global lot_b
    lot_b = StringVar()
    global lot_c
    lot_c = StringVar()
    global nlots
    nlots = StringVar()
    global nsites
    nsites = IntVar()
    global ntypes
    ntypes = IntVar()
    global Bragg_treatment,subtract_bragg
    Bragg_treatment = IntVar()
    subtract_bragg = StringVar()

    Bragg_treatment.set(0)
    subtract_bragg.set(u"n")

    lot_a.set(u"10")
    lot_b.set(u"10")
    lot_c.set(u"10")
    nlots.set(u"1")

    global check_doPBC
    check_doPBC = IntVar()
    check_doPBC.set(1)


    global checkCarbon
    checkCarbon = IntVar()
    checkCarbon.set(1)
    global checkOxygen
    checkOxygen = IntVar()
    checkOxygen.set(1)
    global checkNitrogen
    checkNitrogen = IntVar()
    checkNitrogen.set(0)
    global checkSulfur
    checkSulfur = IntVar()
    checkSulfur.set(0)
    global checkChlorine
    checkChlorine = IntVar()
    checkChlorine.set(0)
    global checkFluorine
    checkFluorine = IntVar()
    checkFluorine.set(0)

    global check_twofold
    check_twofold = IntVar()
    check_twofold.set(1)
    global check_horiz_mirror
    check_horiz_mirror = IntVar()
    check_horiz_mirror.set(0)
    global check_vert_mirror
    check_vert_mirror = IntVar()
    check_vert_mirror.set(0)
    global check_normalize
    check_normalize = IntVar()
    check_normalize.set(1)

    global norm_val
    norm_val = StringVar()
    norm_val.set(u"20000")

    global GetLotSize_iter
    GetLotSize_iter = StringVar()
    GetLotSize_iter.set(u"15")
    global radio_hkl
    radio_hkl = IntVar()

    global PixelsX, PixelsY, PixelsZ
    PixelsX = IntVar()
    PixelsY = IntVar()
    PixelsZ = IntVar()
    PixelsX.set(400)
    PixelsY.set(400)
    PixelsZ.set(1)

    global check_vMinMax,pgm_vMin,pgm_vMax
    check_vMinMax = IntVar()
    check_vMinMax.set(0)
    pgm_vMin = IntVar()
    pgm_vMin.set(100)
    pgm_vMax = IntVar()
    pgm_vMax.set(5000)

def ViewPGMImage():
    print('diffuse_input_controls_support.ViewPGMImage')
    sys.stdout.flush()

    DIG_fname = 'diffuse'+'_'+str(dsname.get())+'.inp'
    pgm_path = workpath+'pgm/'
    pgm_name =  re.sub('.inp','.pgm', DIG_fname) 

    # MyPgmImage = '../testexample/aspirin/pgm/diffuse_h0l.pgm' 
    MyPgmImage = pgm_path+pgm_name 
    image = DIF.read_pgm(MyPgmImage, byteorder='>')
 #   print image[1,:]
    # vmin and vmax are upper and lower cutoffs
 #   print pgm_vMax.get()
    iimin,iimax = pgm_vMin.get(),pgm_vMax.get()

   # if check_vMinMax.get()==1: pyplot.imshow(image, pyplot.cm.gray,vmin=int(pgm_vMin.get()),vmax=int(pgm_vMin.get()))
    if check_vMinMax.get()==1: pyplot.imshow(image, pyplot.cm.gray,vmin=iimin,vmax=iimax)
    if check_vMinMax.get()==0: pyplot.imshow(image, pyplot.cm.gray)

    pyplot.show()

def radio_h0l():
    print('h0l settings')
    sys.stdout.flush()
    radio_hkl.get()
    subtract_bragg.set(u"n")
    h1.set(u"0.0")
    h2.set(u"0.0")
    h3.set(u"0.0")
    k1.set(u"1.0")
    k2.set(u"0.0")
    k3.set(u"0.0")
    l1.set(u"0.0")
    l2.set(u"0.0")
    l3.set(u"1.0")
    dsname.set(u"h0l")


def radio_hk0():
    print('hk0 settings')
    sys.stdout.flush()
    radio_hkl.get()
    subtract_bragg.set(u"n")
    h1.set(u"0.0")
    h2.set(u"0.0")
    h3.set(u"0.0")
    k1.set(u"0.0")
    k2.set(u"1.0")
    k3.set(u"0.0")
    l1.set(u"1.0")
    l2.set(u"0.0")
    l3.set(u"0.0")
    dsname.set(u"hk0")


def radio_0kl():
    print('0kl settings')
    sys.stdout.flush()
    radio_hkl.get()
    subtract_bragg.set(u"n")
    h1.set(u"0.0")
    h2.set(u"0.0")
    h3.set(u"0.0")
    k1.set(u"0.0")
    k2.set(u"0.0")
    k3.set(u"1.0")
    l1.set(u"0.0")
    l2.set(u"1.0")
    l3.set(u"0.0")
    dsname.set(u"0kl")
    
def radioBragg1():
    print('radioBragg1')
    sys.stdout.flush()
    Bragg_treatment.get()
    subtract_bragg.set(u"n")

def radioBragg2():
    print('radioBragg2')
    sys.stdout.flush()
    Bragg_treatment.get()
    subtract_bragg.set(u"y")

def radioBragg3():
    print('radioBragg3')
    sys.stdout.flush()
    Bragg_treatment.get()
    subtract_bragg.set(u"e")

def radioBragg4():
    print('radioBragg4')
    sys.stdout.flush()
    Bragg_treatment.get()
    subtract_bragg.set(u"E")

def GetLotSizes():
    print('diffuse_input_controls_support.GetLotSizes')
    sys.stdout.flush()

    w.Text1.insert(END,"calculating possible lot sizes \n")
    w.Text1.insert(END,"suggested lotsizes [a b c] and sampling number \n")
    
    cellratio = np.max(cellpar[0:3])/cellpar[0:3] 
    crysize = np.product(crysizepar)
    w.Text1.insert(END,"cell ratios: %.3f %.3f %.3f \n" %(cellratio[0],cellratio[1],cellratio[2]))
    for n in range(int(GetLotSize_iter.get())):
     lotabc = cellratio*(n+1)
     nlots = crysize/np.product(lotabc)
     w.Text1.insert(END,"[%i %i %i], %i \n" %( int(round(lotabc[0])),int(round(lotabc[1])),int(round(lotabc[2])),nlots*2 ))
    # print (n+1),int(round(nlots),nlots
    w.Text1.see("end")



def GenDiffuseInputFile():
    print('diffuse_input_controls_support.GenDiffuseInputFile')
    sys.stdout.flush()

    # get the variables for diffuse input generator and put them into a list 
    global DIG_fname
 #   DIG_fname = workpath+'INPUT'+'_'+dsname+'.inp'
    DIG_fname = 'diffuse'+'_'+str(dsname.get())+'.inp'

   # w.Text1.insert(END,"diffuse input generator input file :\n %s" %(DIG_fname) )
    w.Text1.insert(END,"\n running diffuse input generator \n")
    w.Text1.see("end")

 #   DIG_command_string = "%s < %s" %(dif_input_gen_exe,DIG_fname)
 #   os.system(DIG_command_string)

   # DIGrun = subprocess.Popen([dif_input_gen_exe,'>'+DIG_FNAME],shell=False,cwd=workpath,stdin=subprocess.PIPE)
    DIGrun = subprocess.Popen([dif_input_gen_exe],shell=False,cwd=workpath,stdin=subprocess.PIPE)
    DIGrun.stdin.write('%s\n' %(headername+str(dsname.get()))) #title
    DIGrun.stdin.write('%s\n' %(DIG_fname))  # filename
    DIGrun.stdin.write('%.6f %.6f %.6f %.6f %.6f %.6f\n' %(cellpar[0],cellpar[1],cellpar[2],cellpar[3],cellpar[4],cellpar[5]))# unit cell
    DIGrun.stdin.write('%.6f %.6f\n' %(float(Lam.get()),float(Theta_max.get()))) # lambda theta_max
    DIGrun.stdin.write('%.6f %.6f %.6f\n' %(float(h1.get()),float(h2.get()),float(h3.get()))) # origin
    DIGrun.stdin.write('%.6f %.6f %.6f\n' %(float(k1.get()),float(k2.get()),float(k3.get()))) # vertical acxis
    DIGrun.stdin.write('%.6f %.6f %.6f\n' %(float(l1.get()),float(l2.get()),float(l3.get()))) # horizontal axis
    DIGrun.wait()

    # now create new diffuse file 

    w.Text1.insert(END,"\n generating diffuse input file\n")
    w.Text1.see("end")

    difgen_var = [str(subtract_bragg.get()),int(lot_a.get()),
int(lot_b.get()), int(lot_c.get()), int(nlots.get()),
int(nsites.get()), int(ntypes.get()), int(check_doPBC.get()),
int(checkCarbon.get()), int(checkOxygen.get()),int(checkNitrogen.get()),
int(checkSulfur.get()), int(checkChlorine.get()), int(checkFluorine.get()),int(PixelsX.get()), int(PixelsY.get()), int(PixelsZ.get())]

    DIF.generate_diffuse_input(difgen_var,workpath,DIG_fname,cellpar,crysizepar) 
   
def run_diffuse_job():
    print('diffuse_input_controls_support.run_diffuse_job')
    sys.stdout.flush()
   
    global DIG_fname,pgm_path,bin_name,pgm_name

    DIG_fname = 'diffuse'+'_'+str(dsname.get())+'.inp'
    pgm_path = workpath+'pgm/'
    bin_name =  re.sub('.inp','.bin', DIG_fname) 
    pgm_name =  re.sub('.inp','.pgm', DIG_fname) 

    diffuseout = headername+"_relabel_ZMC.diffuse"  

    if not os.path.exists(pgm_path):
     os.makedirs(pgm_path)

    w.Text1.insert(END,"\n running diffuse calcualtion : \n")
    w.Text1.see("end")
# tricky way to pass required values to stdin
    dzmcrun = subprocess.Popen([dzmc_exe, str(diffuseout)],shell=False,cwd=workpath,stdin=subprocess.PIPE)
    dzmcrun.stdin.write('%s \n' %(DIG_fname))
    dzmcrun.stdin.write('%s \n' %(bin_name))
    dzmcrun.wait()

    w.Text1.insert(END,"\n running bin2gray : \n")
    w.Text1.see("end")

    normstr = "--norm="+str(norm_val.get())
    b2garg = [] 
    if check_twofold.get() == 1 : b2garg.append("--twofold")   
    if check_horiz_mirror.get() == 1 : b2garg.append("--hmirror")   
    if check_vert_mirror.get() == 1 : b2garg.append("--vmirror")   
    if check_normalize.get() == 1 : b2garg.append(normstr)   
    
    if np.size(b2garg) == 1 :
      b2grun = subprocess.Popen([b2g_exe,b2garg[0],bin_name],cwd=workpath)
    elif np.size(b2garg) == 2 :
      b2grun = subprocess.Popen([b2g_exe,b2garg[0],b2garg[1],bin_name],cwd=workpath)
    elif np.size(b2garg) == 3 :
      b2grun = subprocess.Popen([b2g_exe,b2garg[0],b2garg[1],b2garg[2],bin_name],cwd=workpath)
    elif np.size(b2garg) == 4 :
      b2grun = subprocess.Popen([b2g_exe,b2garg[0],b2garg[1],b2garg[2],b2garg[3],bin_name],cwd=workpath)
    else :
      b2grun = subprocess.Popen([b2g_exe,bin_name],cwd=workpath)

    b2grun.wait()

    move(workpath+pgm_name,pgm_path+pgm_name)
    move(workpath+bin_name,pgm_path+bin_name)

    w.Text1.insert(END,"\n diffuse job complete : \n")
    w.Text1.see("end")


def makeDiffuseRunScript():
    print('diffuse_input_controls_support.makeDiffuseRunScript')
    sys.stdout.flush()

    global ZMCinpf
    ZMCinpf = headername+"_relabel_ZMC.inp"  

    myruntxt = """import os
import sys
import re
import numpy as np
import subprocess 
from shutil import copyfile
from shutil import move
"""

    DIG_fname = 'diffuse'+'_'+str(dsname.get())+'.inp'
    pgm_path = workpath+'pgm/'
    bin_name =  re.sub('.inp','.bin', DIG_fname) 
    pgm_name =  re.sub('.inp','.pgm', DIG_fname) 

    difsh = open(workpath+'run_diffuse_'+str(dsname.get())+'_job.py','wb')
    difsh.write(myruntxt)

    diffuseout = headername+"_relabel_ZMC.diffuse"  

    difsh.write("if not os.path.exists('./pgm/'):\n")
    difsh.write("  os.makedirs('./pgm/')\n")

  #  difsh.write("dzmcrun = subprocess.Popen([DZMC.exe, %s],shell=False,cwd='.',stdin=subprocess.PIPE)\n" %(diffuseout))
  #  difsh.write("dzmcrun.stdin.write('%s \\n' %(%s))\n" %(DIG_fname))
  #  difsh.write("dzmcrun.stdin.write('%s \\n' %(%s))\n" %(bin_name))
  #  difsh.write("dzmcrun.wait()\n")

    difsh.write("os.system('echo %s > difINPUT')\n" %(DIG_fname) )
    difsh.write("os.system('echo %s >> difINPUT')\n" %(bin_name) )
    difsh.write("os.system('DZMC %s < difINPUT')\n" %(diffuseout) )


    normstr = "--norm="+str(norm_val.get())
    b2garg = [] 
    if check_twofold.get() == 1 : b2garg.append("--twofold")   
    if check_horiz_mirror.get() == 1 : b2garg.append("--hmirror")   
    if check_vert_mirror.get() == 1 : b2garg.append("--vmirror")   
    if check_normalize.get() == 1 : b2garg.append(normstr)   
    
    if np.size(b2garg) == 1 :
      difsh.write("os.system('bin2gray %s %s')\n" %(b2garg[0],bin_name))
    elif np.size(b2garg) == 2 :
      difsh.write("os.system('bin2gray %s %s %s')\n" %(b2garg[0],b2garg[1],bin_name))
    elif np.size(b2garg) == 3 :
      difsh.write("os.system('bin2gray %s %s %s %s')\n" %(b2garg[0],b2garg[1],b2garg[2],bin_name))
    elif np.size(b2garg) == 4 :
      difsh.write("os.system('bin2gray %s %s %s %s %s')\n" %(b2garg[0],b2garg[1],b2garg[2],b2garg[3],bin_name))
    else :
      difsh.write("os.system('bin2gray %s')\n" %(bin_name) )

    difsh.write("move('%s','./pgm/'+'%s')\n"%(pgm_name,pgm_name))
    difsh.write("move('%s','./pgm/'+'%s')\n"%(bin_name,bin_name))

  #  move(workpath+bin_name,pgm_path+bin_name)

    difsh.close()



def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    global bin_dir,dif_input_gen_exe,workpath,headername,cellpar,crysizepar
    global dzmc_exe,b2g_exe,total_atoms,atomtypes_total,non_hyd_atoms
 
    bin_dir, dif_input_gen_exe,workpath,headername,crysizepar,cellpar,total_atoms,atomtypes_total,non_hyd_atoms = ZMCGUI_support.getvars() 

    nsites.set(non_hyd_atoms)
    ntypes.set(atomtypes_total-1)

    w.Text1.insert(END,"\n ZMC executables path: \n %s \n" %(bin_dir))
    w.Text1.insert(END,"\n current working directory : \n %s \n" %(workpath))
    w.Text1.insert(END,"\n header name : \n %s \n" %(headername))
    w.Text1.see("end")
    dzmc_exe = bin_dir + 'DZMC'
    b2g_exe = bin_dir + 'bin2gray'

   # print dif_input_gen_exe
   # print bin_dir

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import diffuse_input_controls
    diffuse_input_controls.vp_start_gui()


