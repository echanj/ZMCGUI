#! /usr/bin/env python
#
# Support module generated by PAGE version 4.7
# In conjunction with Tcl version 8.6
#    Sep 13, 2016 04:43:55 PM


import sys
import sys
import os
import re
import ZMCGUI_functions as zf
import ZMCGUI_support
import subprocess 
import numpy as np
from shutil import copyfile
from shutil import move

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

def set_Tk_var():
    # These are Tk variables used passed to Tkinter and must be
    # defined before the widgets using them are created.
    global ZMC_Temp, ZMC_cycles
    ZMC_Temp = StringVar()
    ZMC_Temp.set(u"1.00")
    ZMC_cycles = IntVar()
    ZMC_cycles.set(2)

    global ZMC_XYZ_width, ZMC_Q_width, ZMC_In_width
    global ZMC_XYZ_init_width, ZMC_Q_Init_Width
    global ZMC_InInitW, ZMC_BAdjust, ZMC_IncUpdate, ZMC_BAdjust_Biso

    ZMC_XYZ_width = StringVar()
    ZMC_Q_width = StringVar()
    ZMC_In_width = StringVar()
    ZMC_XYZ_init_width = StringVar()
    ZMC_Q_Init_Width = StringVar()
    ZMC_InInitW = StringVar()
    ZMC_IncUpdate = IntVar()
    ZMC_BAdjust = IntVar()
    ZMC_BAdjust_Biso = StringVar()

    ZMC_XYZ_width.set(u"0.1")
    ZMC_Q_width.set(u"0.1")
    ZMC_In_width.set(u"0.1")
    ZMC_XYZ_init_width.set(u"0.1")
    ZMC_Q_Init_Width.set(u"0.0")
    ZMC_InInitW.set(u"0.0") 
    ZMC_IncUpdate.set(1)
    ZMC_BAdjust.set(0)
    ZMC_BAdjust_Biso.set(u"3.0")

    global ZMC_nZmats, ZMC_nLoc, ZMC_Nspring
    ZMC_nZmats = IntVar()
    ZMC_nLoc = IntVar()
    ZMC_Nspring = IntVar()

    global QModType, QVEC1, QVEC2, QVEC3

    QModType = IntVar()
    QVEC1 = StringVar()
    QVEC2 = StringVar()
    QVEC3 = StringVar()
    QModType.set(1)
    QVEC1.set(u"0.5")
    QVEC2.set(u"0.0")
    QVEC3.set(u"0.0")

    global QPOL1, QPOL2, QPOL3, QZOCC

    QPOL1 = StringVar()
    QPOL2 = StringVar()
    QPOL3 = StringVar()
    QZOCC = IntVar()
    QPOL1.set(u"1.0")
    QPOL2.set(u"0.0")
    QPOL3.set(u"0.0")
    QZOCC.set(1)
 
    global QCONC, QDIR1, QDIR2, QDIR3, QAMP
    QCONC = StringVar()
    QDIR1 = StringVar()
    QDIR2 = StringVar()
    QDIR3 = StringVar()
    QAMP = StringVar()

    QCONC.set(u"0.5")
    QDIR1.set(u"0.0")
    QDIR2.set(u"0.0")
    QDIR3.set(u"1.0")
    QAMP.set(u"1.0") 

    global runZMC_reread, runZMC_modwave
    runZMC_reread = IntVar()
    runZMC_modwave = IntVar()
    runZMC_reread.set(0)
    runZMC_modwave.set(0) 

    global ZMC_option_Diffuse
    ZMC_option_Diffuse = IntVar()
    ZMC_option_Diffuse.set(1)

    global ZMC_occ_fname
    ZMC_occ_fname = StringVar()
 


def GenZMCInputFile():
    print('ZMC_input_controls_support.GenZMCInputFile')
    sys.stdout.flush()

    w.Text1.insert(END,"\nGenerateing ZMC input file\n")

    getZMCinputVars = [float(ZMC_Temp.get()),int(ZMC_cycles.get()), float(ZMC_XYZ_width.get()), float(ZMC_Q_width.get()), float(ZMC_In_width.get()), float(ZMC_XYZ_init_width.get()), float(ZMC_Q_Init_Width.get()), float(ZMC_InInitW.get()), int(ZMC_IncUpdate.get()), int(ZMC_BAdjust.get()), float(ZMC_BAdjust_Biso.get()), int(ZMC_nZmats.get()), int(ZMC_nLoc.get()), int(ZMC_Nspring.get())]

    getModwaveInpVars = [int(runZMC_modwave.get()),int(QModType.get()),float(QVEC1.get()),float(QVEC2.get()),float(QVEC3.get()),float(QPOL1.get()),float(QPOL2.get()),float(QPOL3.get()), int(QZOCC.get()),float(QCONC.get()),float(QDIR1.get()),float(QDIR2.get()),float(QDIR3.get()), float(QAMP.get())] 

    zf.generate_ZMC_input_full(projectname,headername,ZMC_occ_fname.get(),ZMC_inp_file,crysizepar,cellpar,Sites,int(ZMC_nZmats.get()),num_spring_types,contacts_trimmed,getZMCinputVars,getModwaveInpVars)

    w.Text1.see("end")

def Run_ZMC():
    print('ZMC_input_controls_support.Run_ZMC')
    sys.stdout.flush()

    w.Text1.insert(END,"\n running ZMC\n")
    w.Text1.see("end")

    ZMC_crystal_out_file = headername+"_relabel_ZMC.crystal"  
   
    ZMC_args = []  
    ZMC_args.append('--crystal')
    if ZMC_option_Diffuse.get() == 1 : ZMC_args.append('--diffuse')
    if runZMC_reread.get() == 1 : ZMC_args.append('--reread='+ZMC_crystal_out_file)
    if runZMC_modwave.get() == 1 : ZMC_args.append('--modwave')

    if runZMC_modwave.get() == 1 and ZMC_option_Diffuse.get() == 1 : 
      zmcrun = subprocess.Popen([zmc_exe,'--crystal','--modwave', str(ZMC_inp_file) ],cwd=workpath)
      zmcrun.wait()
      zmcrun = subprocess.Popen([zmc_exe,'--reread='+ZMC_crystal_out_file,'--diffuse', str(ZMC_inp_file) ],cwd=workpath)
      zmcrun.wait()

    else:
     if np.size(ZMC_args) == 1:
      zmcrun = subprocess.Popen([zmc_exe,ZMC_args[0], str(ZMC_inp_file) ],cwd=workpath)
      zmcrun.wait()

     if np.size(ZMC_args) == 2:
      zmcrun = subprocess.Popen([zmc_exe,ZMC_args[0],ZMC_args[1], str(ZMC_inp_file) ],cwd=workpath)
      zmcrun.wait()

     if np.size(ZMC_args) == 3:
      zmcrun = subprocess.Popen([zmc_exe,ZMC_args[0],ZMC_args[1],ZMC_args[2], str(ZMC_inp_file) ],cwd=workpath)
      zmcrun.wait()

     if np.size(ZMC_args) == 4:
      zmcrun = subprocess.Popen([zmc_exe,ZMC_args[0],ZMC_args[1],ZMC_args[2],ZMC_args[3], str(ZMC_inp_file) ],cwd=workpath)
      zmcrun.wait()


  #  if ZMC_option_Diffuse.get() == 1:
  #   zmcrun = subprocess.Popen([zmc_exe,'--crystal','--diffuse', str(ZMC_inp_file) ],cwd=workpath)
  #   zmcrun.wait()

  #  if ZMC_option_Diffuse.get() == 0:
  #   zmcrun = subprocess.Popen([zmc_exe,'--crystal', str(ZMC_inp_file) ],cwd=workpath)
  #   zmcrun.wait()

    w.Text1.insert(END,"\n ZMC run completed\n")
    w.Text1.see("end")
   

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

    global bin_dir,dif_input_gen_exe,workpath,headername,cellpar,crysizepar
    global zmc_exe,total_atoms,occfname,Sites,nloc,zmat,num_spring_types,contacts_trimmed

    bin_dir, dif_input_gen_exe,workpath,headername,crysizepar,cellpar,total_atoms,occfname,Sites,nloc,zmat,num_spring_types,contacts_trimmed = ZMCGUI_support.getZMCINPvars() 

 #   nsites.set(non_hyd_atoms)
 #   ntypes.set(atomtypes_total-1)
    ZMC_occ_fname.set(occfname)

    global ZMC_inp_file,projectname
    ZMC_inp_file = workpath+headername+"_relabel_ZMC.inp"  
    projectname = workpath+headername+"_relabel"  

    w.Text1.insert(END,"\n ZMC executables path: \n %s \n" %(bin_dir))
    w.Text1.insert(END,"\n current working directory : \n %s \n" %(workpath))
    w.Text1.insert(END,"\n header name : \n %s \n" %(headername))
    w.Text1.insert(END,"\n ZMC input file : \n %s \n" %(ZMC_inp_file))
    w.Text1.see("end")
    zmc_exe = bin_dir + 'ZMC'


    ZMC_nZmats.set(zmat)
    ZMC_nLoc.set(nloc)
    ZMC_Nspring.set(num_spring_types)


def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import ZMC_input_controls
    ZMC_input_controls.vp_start_gui()


